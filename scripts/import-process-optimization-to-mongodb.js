const { MongoClient } = require('mongodb');
const path = require('path');

// ÂØºÂÖ•ÊµÅÁ®ã‰ºòÂåñÊï∞ÊçÆ
const processOptimizationFlowDataPath = path.join(__dirname, '../src/data/processOptimizationFlowData.js');
const processOptimizationFlowData = require(processOptimizationFlowDataPath).default;

// MongoDBËøûÊé•ÈÖçÁΩÆ
const MONGODB_URI = 'mongodb://localhost:27017';
const DATABASE_NAME = 'maintenance_system';
const COLLECTION_NAME = 'process_optimization_flow_data';

async function importProcessOptimizationData() {
  let client;
  
  try {
    console.log('üîó ËøûÊé•Âà∞MongoDB...');
    client = new MongoClient(MONGODB_URI);
    await client.connect();
    
    const db = client.db(DATABASE_NAME);
    const collection = db.collection(COLLECTION_NAME);
    
    console.log('üóëÔ∏è Ê∏ÖÁ©∫Áé∞ÊúâÊµÅÁ®ã‰ºòÂåñÊï∞ÊçÆ...');
    await collection.deleteMany({});
    
    // ËΩ¨Êç¢Êï∞ÊçÆÊ†ºÂºè - Â∞ÜÊØè‰∏™‰ºòÂåñÊ°à‰æã‰Ωú‰∏∫ÂçïÁã¨ÁöÑÊñáÊ°£Â≠òÂÇ®
    const documents = [];
    
    Object.keys(processOptimizationFlowData).forEach(optimizationId => {
      const optimizationData = processOptimizationFlowData[optimizationId];
      
      const document = {
        _id: optimizationId,
        id: optimizationId,
        title: optimizationData.title,
        description: optimizationData.description,
        flowcharts: {
          before: optimizationData.before,
          after: optimizationData.after,
          after2: optimizationData.after2,
          llm: optimizationData.llm
        },
        resourceChanges: optimizationData.resourceChanges || null,
        resourceChanges2: optimizationData.resourceChanges2 || null,
        ganttData: optimizationData.ganttData || null,
        ganttData2: optimizationData.ganttData2 || null,
        createdAt: new Date(),
        updatedAt: new Date(),
        source: 'processOptimizationFlowData.js',
        version: '1.0'
      };
      
      documents.push(document);
    });
    
    console.log(`üì¶ ÂáÜÂ§áÂØºÂÖ• ${documents.length} ‰∏™ÊµÅÁ®ã‰ºòÂåñÊ°à‰æã...`);
    
    // ÊâπÈáèÊèíÂÖ•ÊñáÊ°£
    if (documents.length > 0) {
      const result = await collection.insertMany(documents);
      console.log(`‚úÖ ÊàêÂäüÂØºÂÖ• ${result.insertedCount} ‰∏™ÊµÅÁ®ã‰ºòÂåñÊ°à‰æã`);
      
      // ÊòæÁ§∫ÂØºÂÖ•ÁöÑÊ°à‰æãËØ¶ÊÉÖ
      documents.forEach((doc, index) => {
        console.log(`   ${index + 1}. ${doc.id}: ${doc.title}`);
      });
    }
    
    // ÂàõÂª∫Á¥¢Âºï
    console.log('üîç ÂàõÂª∫Á¥¢Âºï...');
    await collection.createIndex({ id: 1 }, { unique: true });
    await collection.createIndex({ title: 1 });
    await collection.createIndex({ createdAt: 1 });
    console.log('‚úÖ Á¥¢ÂºïÂàõÂª∫ÂÆåÊàê');
    
    // È™åËØÅÊï∞ÊçÆ
    console.log('üîé È™åËØÅÂØºÂÖ•ÁöÑÊï∞ÊçÆ...');
    const count = await collection.countDocuments();
    console.log(`üìä Êï∞ÊçÆÂ∫ì‰∏≠ÂÖ±Êúâ ${count} ‰∏™ÊµÅÁ®ã‰ºòÂåñÊ°à‰æã`);
    
    // ÊòæÁ§∫ÈÉ®ÂàÜÊï∞ÊçÆÁ§∫‰æã
    const sampleDoc = await collection.findOne({ id: 'Optimization1' });
    if (sampleDoc) {
      console.log('üìÑ Êï∞ÊçÆÁ§∫‰æã (Optimization1):');
      console.log(`   - Ê†áÈ¢ò: ${sampleDoc.title}`);
      console.log(`   - ÊèèËø∞: ${sampleDoc.description.substring(0, 50)}...`);
      console.log(`   - ÊµÅÁ®ãÂõæÊï∞Èáè: ${Object.keys(sampleDoc.flowcharts).length}`);
      console.log(`   - ÊòØÂê¶ÂåÖÂê´ËµÑÊ∫êÂàÜÊûê: ${sampleDoc.resourceChanges ? 'ÊòØ' : 'Âê¶'}`);
      console.log(`   - ÊòØÂê¶ÂåÖÂê´ÁîòÁâπÂõæ: ${sampleDoc.ganttData ? 'ÊòØ' : 'Âê¶'}`);
    }
    
    console.log('üéâ ÊµÅÁ®ã‰ºòÂåñÊï∞ÊçÆÂØºÂÖ•ÂÆåÊàêÔºÅ');
    
  } catch (error) {
    console.error('‚ùå ÂØºÂÖ•ËøáÁ®ã‰∏≠ÂèëÁîüÈîôËØØ:', error);
    throw error;
  } finally {
    if (client) {
      await client.close();
      console.log('üîê MongoDBËøûÊé•Â∑≤ÂÖ≥Èó≠');
    }
  }
}

// Êï∞ÊçÆÈ™åËØÅÂíåÁªüËÆ°ÂáΩÊï∞
async function verifyAndAnalyzeData() {
  let client;
  
  try {
    console.log('\nüìä ÂºÄÂßãÊï∞ÊçÆÈ™åËØÅÂíåÂàÜÊûê...');
    client = new MongoClient(MONGODB_URI);
    await client.connect();
    
    const db = client.db(DATABASE_NAME);
    const collection = db.collection(COLLECTION_NAME);
    
    // Âü∫Á°ÄÁªüËÆ°
    const totalCount = await collection.countDocuments();
    console.log(`üìà ÊÄª‰ºòÂåñÊ°à‰æãÊï∞: ${totalCount}`);
    
    // ÊåâÁ±ªÂûãÁªüËÆ°
    const optimizations = await collection.find({}).toArray();
    
    let withResourceAnalysis = 0;
    let withGanttData = 0;
    let withLLMFlowchart = 0;
    
    optimizations.forEach(opt => {
      if (opt.resourceChanges) withResourceAnalysis++;
      if (opt.ganttData) withGanttData++;
      if (opt.flowcharts && opt.flowcharts.llm) withLLMFlowchart++;
    });
    
    console.log(`üìã ÂåÖÂê´ËµÑÊ∫êÂàÜÊûêÁöÑÊ°à‰æã: ${withResourceAnalysis}/${totalCount}`);
    console.log(`üìÖ ÂåÖÂê´ÁîòÁâπÂõæÊï∞ÊçÆÁöÑÊ°à‰æã: ${withGanttData}/${totalCount}`);
    console.log(`ü§ñ ÂåÖÂê´LLMÊµÅÁ®ãÂõæÁöÑÊ°à‰æã: ${withLLMFlowchart}/${totalCount}`);
    
    // Êï∞ÊçÆÂÆåÊï¥ÊÄßÊ£ÄÊü•
    console.log('\nüîç Êï∞ÊçÆÂÆåÊï¥ÊÄßÊ£ÄÊü•:');
    for (const opt of optimizations) {
      const issues = [];
      
      if (!opt.title) issues.push('Áº∫Â∞ëÊ†áÈ¢ò');
      if (!opt.description) issues.push('Áº∫Â∞ëÊèèËø∞');
      if (!opt.flowcharts || !opt.flowcharts.before) issues.push('Áº∫Â∞ëÂéüÂßãÊµÅÁ®ãÂõæ');
      if (!opt.flowcharts || !opt.flowcharts.after) issues.push('Áº∫Â∞ë‰ºòÂåñÂêéÊµÅÁ®ãÂõæ');
      
      if (issues.length > 0) {
        console.log(`   ‚ö†Ô∏è ${opt.id}: ${issues.join(', ')}`);
      } else {
        console.log(`   ‚úÖ ${opt.id}: Êï∞ÊçÆÂÆåÊï¥`);
      }
    }
    
    console.log('\n‚úÖ Êï∞ÊçÆÈ™åËØÅÂÆåÊàê');
    
  } catch (error) {
    console.error('‚ùå Êï∞ÊçÆÈ™åËØÅËøáÁ®ã‰∏≠ÂèëÁîüÈîôËØØ:', error);
  } finally {
    if (client) {
      await client.close();
    }
  }
}

// Â¶ÇÊûúÁõ¥Êé•ËøêË°åÊ≠§ËÑöÊú¨
if (require.main === module) {
  (async () => {
    try {
      await importProcessOptimizationData();
      await verifyAndAnalyzeData();
    } catch (error) {
      console.error('‚ùå ËÑöÊú¨ÊâßË°åÂ§±Ë¥•:', error);
      process.exit(1);
    }
  })();
}

module.exports = {
  importProcessOptimizationData,
  verifyAndAnalyzeData
}; 